"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMultisigRouteProcess = void 0;
const ConfigService_1 = __importDefault(require("../services/ConfigService"));
const errors_1 = require("../utils/errors");
const updateMultisigRouteProcess = async (internalTxHash, step, statusManager, process, fromChain) => {
    const config = ConfigService_1.default.getInstance().getConfig();
    if (!config.multisigConfig?.getMultisigTransactionDetails) {
        throw new Error('"getMultisigTransactionDetails()" is missing in Multisig config.');
    }
    const updateIntermediateMultisigStatus = () => {
        process = statusManager.updateProcess(step, process.type, 'PENDING');
    };
    const multisigStatusResponse = await config.multisigConfig?.getMultisigTransactionDetails(internalTxHash, fromChain.id, updateIntermediateMultisigStatus);
    if (multisigStatusResponse.status === 'DONE') {
        process = statusManager.updateProcess(step, process.type, 'PENDING', {
            txHash: multisigStatusResponse.txHash,
            multisigTxHash: undefined,
            txLink: fromChain.metamask.blockExplorerUrls[0] +
                'tx/' +
                multisigStatusResponse.txHash,
        });
    }
    if (multisigStatusResponse.status === 'FAILED') {
        throw new errors_1.TransactionError(errors_1.LifiErrorCode.TransactionFailed, 'Multisig transaction failed.');
    }
    if (multisigStatusResponse.status === 'CANCELLED') {
        throw new errors_1.TransactionError(errors_1.LifiErrorCode.TransactionRejected, 'Transaction was rejected by users.');
    }
};
exports.updateMultisigRouteProcess = updateMultisigRouteProcess;
