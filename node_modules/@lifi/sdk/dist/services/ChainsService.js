import { ValidationError } from '../utils/errors';
import ApiService from './ApiService';
export default class ChainsService {
    constructor() {
        this.chains = [];
        this.loadingPromise = this.loadAvailableChains();
    }
    async loadAvailableChains() {
        try {
            this.chains = await ApiService.getChains();
        }
        catch (error) {
            // We try to load chains during initialization of the LiFi class and
            // because we no longer in scope of the constructor we fail silently here
        }
    }
    async checkLoading() {
        if (this.loadingPromise) {
            await this.loadingPromise;
        }
        if (!this.chains.length) {
            await this.loadAvailableChains();
        }
    }
    static getInstance() {
        if (!this.instance) {
            this.instance = new ChainsService();
        }
        return this.instance;
    }
    async getChainById(chainId) {
        await this.checkLoading();
        const chain = this.chains.find((chain) => chain.id === chainId);
        if (!chain) {
            throw new ValidationError(`Unknown chainId passed: ${chainId}.`);
        }
        return chain;
    }
    async getChains() {
        await this.checkLoading();
        return this.chains;
    }
}
